package com.example.simplemyjdbc.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.simplemyjdbc.domian.Coal;

public class CoalManager {
	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String createTableCoal = "CREATE TABLE Coal(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), type varchar(25), percentofcarbon int)";
	
	private PreparedStatement addCoalStatement;
	private PreparedStatement deleteAllCoalStatement;
	private PreparedStatement getAllCoalsStatement;
	private PreparedStatement updateNameStatement;
	private PreparedStatement updateTypeStatement;
	private PreparedStatement updatePercentStatement;
	private PreparedStatement deleteByNameStatement;
	private PreparedStatement getByNameStatement;
	private PreparedStatement getByTypeStatement;
	private PreparedStatement getByPercentStatement;
	private PreparedStatement updateStatement;
	private Statement statement;

	public CoalManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			
			boolean tableExistence = false;
			ResultSet resultSet = connection.getMetaData().getTables(null, null, null, null);
			while (resultSet.next()) {
				if ("Coal".equalsIgnoreCase(resultSet.getString("TABLE_NAME"))) {
					tableExistence = true;
					break;
				}
			}
			
			if (!tableExistence) {
				statement.executeUpdate(createTableCoal);
			}
			
			addCoalStatement = connection.prepareStatement("INSERT INTO Coal (name, type, percentOfCarbon) VALUES (?,?,?)");
			deleteAllCoalStatement = connection.prepareStatement("DELETE FROM Coal");
			getAllCoalsStatement = connection.prepareStatement("SELECT * FROM Coal");
			updateNameStatement = connection.prepareStatement("UPDATE Coal SET name= ? WHERE name= ?");
			updateTypeStatement = connection.prepareStatement("UPDATE Coal SET type= ? WHERE name= ?");
			updatePercentStatement = connection.prepareStatement("UPDATE Coal SET percentofcarbon= ? WHERE name= ?");
			deleteByNameStatement = connection.prepareStatement("DELETE FROM Coal where name= ?");
			getByNameStatement = connection.prepareStatement("SELECT * FROM Coal WHERE name= ?");
			getByTypeStatement = connection.prepareStatement("SELECT * FROM Coal WHERE type= ?");
			getByPercentStatement = connection.prepareStatement("SELECT * FROM Coal WHERE percentofcarbon= ?");
			updateStatement = connection.prepareStatement("UPDATE Coal SET name= ?, type= ?, percentofcarbon= ? WHERE id= ?");
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}
	
	public void deleteEverything() {
		try {
			deleteAllCoalStatement.executeUpdate();
		}
		catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int addCoal(Coal coal) {
		int result = 0;
		try {
			addCoalStatement.setString(1, coal.getName());
			addCoalStatement.setString(2, coal.getType());
			addCoalStatement.setInt(3, coal.getPercentOfCarbon());
			result = addCoalStatement.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int update(Coal newCoal) {
		int result = 0;
		try {
			updateStatement.setString(1, newCoal.getName());
			updateStatement.setString(2, newCoal.getType());
			updateStatement.setInt(3, newCoal.getPercentOfCarbon());
			updateStatement.setLong(4, newCoal.getId());
			result = updateStatement.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	
	public int updateName(String oldName, String newName) {
		int result = 0;
		try {
			updateNameStatement.setString(1, newName);
			updateNameStatement.setString(2, oldName);
			result = updateNameStatement.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int updateType(String name, String newType) {
		int result = 0;
		try {
			updateTypeStatement.setString(1, newType);
			updateTypeStatement.setString(2, name);
			result = updateTypeStatement.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int updatePercent(String name, int newPercent) {
		int result = 0;
		try {
			updatePercentStatement.setInt(1, newPercent);
			updatePercentStatement.setString(2, name);
			result = updatePercentStatement.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int deleteByName(String name) {
		int result = 0;
		try {
			deleteByNameStatement.setString(1, name);
			result = deleteByNameStatement.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public List<Coal> getByName(String name) {
		List<Coal> selectedList = new ArrayList<>();
		try {
			getByNameStatement.setString(1, name);
			ResultSet resultSet = getByNameStatement.executeQuery();
			selectedList = fillCoalList(resultSet);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return selectedList;
	}
	
	public List<Coal> getByType(String type) {
		List<Coal> selectedList = new ArrayList<>();
		try {
			getByTypeStatement.setString(1, type);
			ResultSet resultSet = getByTypeStatement.executeQuery();
			selectedList = fillCoalList(resultSet);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return selectedList;
	}
	
	public List<Coal> getByPercent(int percent) {
		List<Coal> selectedList = new ArrayList<>();
		try {
			getByPercentStatement.setInt(1, percent);
			ResultSet resultSet = getByPercentStatement.executeQuery();
			selectedList = fillCoalList(resultSet);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return selectedList;
	}
	
	
	private List<Coal> fillCoalList(ResultSet resultSet) throws SQLException{
		List<Coal> coals = new ArrayList<>();
		while(resultSet.next()) {
			Coal coal = new Coal();
			coal.setId(resultSet.getInt("id"));
			coal.setName(resultSet.getString("name"));
			coal.setType(resultSet.getString("type"));
			coal.setPercentOfCarbon(resultSet.getInt("percentofcarbon"));
			coals.add(coal);
		}
		return coals;
	}
	
	public List<Coal> getAllCoal() {
		List<Coal> coalList = new ArrayList<>();
		
		try {
			ResultSet resultSet = getAllCoalsStatement.executeQuery();
			while(resultSet.next()) {
				Coal coal = new Coal();
				coal.setId(resultSet.getInt("id"));
				coal.setName(resultSet.getString("name"));
				coal.setType(resultSet.getString("type"));
				coal.setPercentOfCarbon(resultSet.getInt("percentofcarbon"));
				coalList.add(coal);
			}

		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		
		return coalList;
	}
	
}
